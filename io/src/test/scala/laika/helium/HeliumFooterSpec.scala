/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package laika.helium

import cats.effect.{ IO, Resource }
import laika.api.Transformer
import laika.ast.{ Emphasized, Path, TemplateString }
import laika.ast.Path.Root
import laika.format.{ HTML, Markdown }
import laika.io.api.TreeTransformer
import laika.io.helper.{ InputBuilder, ResultExtractor, StringOps }
import laika.io.implicits._
import laika.io.model.StringTreeOutput
import laika.theme._
import munit.CatsEffectSuite

import java.lang.RuntimeException
import java.util.Locale

class HeliumFooterSpec extends CatsEffectSuite with InputBuilder with ResultExtractor
    with StringOps {

  def transformer(theme: ThemeProvider): Resource[IO, TreeTransformer[IO]] = Transformer
    .from(Markdown)
    .to(HTML)
    .parallel[IO]
    .withTheme(theme)
    .build

  val input = Seq(
    Root / "doc-1.md" -> "Content"
  )

  def transformAndExtract(inputs: Seq[(Path, String)], helium: Helium): IO[String] =
    transformer(helium.build).use { t =>
      for {
        resultTree <- t.fromInput(build(inputs)).toOutput(StringTreeOutput).transform
        res        <- IO.fromEither(
          resultTree.extractTidiedSubstring(
            Root / "doc-1.html",
            "<main class=\"content\">",
            "</main>"
          )
            .toRight(new RuntimeException("Missing document under test"))
        )
      } yield res
    }

  test("default footer") {
    val expected =
      """<p>Content</p>
        |<hr class="footer-rule"/>
        |<footer>
        |Site generated by <a href="https://planet42.github.io/Laika/">Laika</a> with the Helium theme.
        |</footer>""".stripMargin
    transformAndExtract(input, Helium.defaults.site.landingPage()).assertEquals(expected)
  }

  test("footer disabled") {
    val expected = """<p>Content</p>"""
    transformAndExtract(input, Helium.defaults.site.landingPage().site.footer()).assertEquals(
      expected
    )
  }

  test("footer set as raw HTML") {
    val footerHTML = "Custom <span>Footer HTML</span> for testing purposes."
    val expected   =
      s"""<p>Content</p>
         |<hr class="footer-rule"/>
         |<footer>
         |$footerHTML
         |</footer>""".stripMargin
    transformAndExtract(
      input,
      Helium.defaults.site.landingPage().site.footer(footerHTML)
    ).assertEquals(expected)
  }

  test("footer set as AST nodes") {
    val expected =
      s"""<p>Content</p>
         |<hr class="footer-rule"/>
         |<footer>
         |Custom <em>Footer</em> for testing purposes.
         |</footer>""".stripMargin
    val helium   = Helium.defaults
      .site.landingPage()
      .site.footer(
        TemplateString("Custom "),
        Emphasized("Footer"),
        TemplateString(" for testing purposes.")
      )
    transformAndExtract(input, helium).assertEquals(expected)
  }

}
